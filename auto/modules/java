
# Copyright (C) NGINX, Inc.


shift

NXT_JAVA_HOME=${JAVA_HOME-}
NXT_JAR_REPO=https://repo1.maven.org/maven2/
NXT_JAR_LOCAL_REPO=$HOME/.m2/repository/
NXT_SPEC_TARGET=javax

for nxt_option; do

    case "$nxt_option" in
        -*=*) value=`echo "$nxt_option" | sed -e 's/[-_a-zA-Z0-9]*=//'`     ;;
           *) value="" ;;
    esac

    case "$nxt_option" in

        --module=*)     NXT_JAVA_MODULE="$value"                              ;;
        --home=*)       NXT_JAVA_HOME="$value"                                ;;
        --lib-path=*)   NXT_JAVA_LIB_PATH="$value"                            ;;
        --repo=*)       NXT_JAR_REPO="$value"                                 ;;
        --local-repo=*) NXT_JAR_LOCAL_REPO="$value"                           ;;
        --sha512=*)     NXT_SHA512_TOOL="$value"                              ;;
        --jars=*)       NXT_JARS="$value"                                     ;;
		--target=*)     NXT_SPEC_TARGET="$value"                              ;;

        --help)
            cat << END

    --module=NAME         set unit Java module name
    --home=DIR            set Java home directory
    --lib-path=DIRECTORY  set directory path to libjvm.so library
    --repo=URL            set Maven remote repository URL
                          default: "$NXT_JAR_REPO"
    --local-repo=DIR      set local repository directory
                          default: "$NXT_JAR_LOCAL_REPO"
    --sha512=SHA512       set command for SHA512 check
    --jars=DIR            set jars install/search directory
    --target=SPEC         use "javax" or "jakarta" servlet spec
                          default: "javax"

END
            exit 0
        ;;

        *)
            echo
            echo $0: error: invalid Java option \"$nxt_option\"
            echo
            exit 1
        ;;
    esac

done


if [ ! -f $NXT_AUTOCONF_DATA ]; then
   echo
   echo Please run common $0 before configuring module \"$nxt_module\".
   echo
   exit 1
fi

. $NXT_AUTOCONF_DATA


NXT_JARS=${NXT_JARS=$NXT_MODULESDIR}
NXT_JAVA_MODULE=${NXT_JAVA_MODULE=java}
NXT_JAVA_LIB_PATH=${NXT_JAVA_LIB_PATH=}

$echo "configuring Java module"
$echo "configuring Java module ..." >> $NXT_AUTOCONF_ERR

if [ -n "${NXT_JAVA_HOME}" ]; then
    $echo "using java.home ${NXT_JAVA_HOME}"
    $echo "using java.home ${NXT_JAVA_HOME}" >> $NXT_AUTOCONF_ERR

    if [ ! -d "${NXT_JAVA_HOME}" ]; then
        $echo
        $echo $0: error: Java home directory not found.
        $echo
        exit 1
    fi

    NXT_JAVA="${NXT_JAVA_HOME}/bin/java"

else
    $echo -n "checking for java executable ..."
    $echo "checking for java executable ..." >> $NXT_AUTOCONF_ERR

    NXT_JAVA=`which java || :`
    if [ -z "$NXT_JAVA" -o ! -x "$NXT_JAVA" ]; then
        $echo " not found"
        $echo
        $echo $0: error: java executable not found.
        $echo
        exit 1
    fi

    $echo " found $NXT_JAVA"
    $echo "found $NXT_JAVA" >> $NXT_AUTOCONF_ERR

    "$NXT_JAVA" -version

    $echo -n "checking java.home ..."
    $echo "checking java.home ..." >> $NXT_AUTOCONF_ERR

    NXT_JAVA_HOME=`$NXT_JAVA -XshowSettings 2>&1 | grep -F -e java.home | sed -e 's/^.*= //'`
    if [ -z "$NXT_JAVA_HOME" ]; then
        $echo " not found"
        $echo
        $echo $0: error: java.home not found.
        $echo
        exit 1
    fi

    $echo " $NXT_JAVA_HOME"
    $echo "got java.home $NXT_JAVA_HOME" >> $NXT_AUTOCONF_ERR

    if [ ! -x "${NXT_JAVA_HOME}/bin/javac" ]; then
        NXT_JAVA_HOME_=${NXT_JAVA_HOME%/jre}
        if [ -x "${NXT_JAVA_HOME_}/bin/javac" ]; then
            $echo "adjust java.home $NXT_JAVA_HOME_"
            $echo "adjust java.home $NXT_JAVA_HOME_" >> $NXT_AUTOCONF_ERR

            NXT_JAVA_HOME="$NXT_JAVA_HOME_"
        fi
    fi
fi

NXT_JAVAC="${NXT_JAVA_HOME}/bin/javac"

if [ ! -x "$NXT_JAVAC" ]; then
    $echo
    $echo $0: error: javac not found.
    $echo
    exit 1
fi

NXT_JAVA_INCLUDE="-I${NXT_JAVA_HOME}/include"

case "$NXT_SYSTEM" in
    Linux)
        NXT_JAVA_INCLUDE="${NXT_JAVA_INCLUDE} -I${NXT_JAVA_HOME}/include/linux"
        ;;
    Darwin)
        NXT_JAVA_INCLUDE="${NXT_JAVA_INCLUDE} -I${NXT_JAVA_HOME}/include/darwin"
        ;;
    FreeBSD)
        NXT_JAVA_INCLUDE="${NXT_JAVA_INCLUDE} -I${NXT_JAVA_HOME}/include/freebsd"
        ;;
esac

if [ -z "$NXT_JAVA_LIB_PATH" ]; then
    $echo -n "checking library path ..."
    $echo "checking library path ..." >> $NXT_AUTOCONF_ERR

    if [ ! -x "$NXT_JAVA" ]; then
        $echo " not found"
        $echo
        $echo $0: error: java executable not found.
        $echo
        exit 1
    fi

    NXT_JAVA_LIB_PATH=`$NXT_JAVA -XshowSettings 2>&1 | grep -F -e sun.boot.library.path | sed -e 's/^.*= //'`

    if [ -z "$NXT_JAVA_LIB_PATH" ]; then
        $echo " not found"
        $echo
        $echo $0: error: library path not found.
        $echo
        exit 1
    fi

    $echo " $NXT_JAVA_LIB_PATH"
    $echo "got library path $NXT_JAVA_LIB_PATH" >> $NXT_AUTOCONF_ERR
fi

NXT_JAVA_LIB_SERVER_PATH="${NXT_JAVA_LIB_PATH}/server"

NXT_JAVA_LDFLAGS="-L${NXT_JAVA_LIB_SERVER_PATH} -Wl,-rpath,${NXT_JAVA_LIB_SERVER_PATH} -ljvm"


nxt_found=no

nxt_feature="JNI"
nxt_feature_name=""
nxt_feature_run=no
nxt_feature_incs="${NXT_JAVA_INCLUDE}"
nxt_feature_libs="${NXT_JAVA_LDFLAGS}"
nxt_feature_test="
    #include <jni.h>

    int main(void) {
        JNI_CreateJavaVM(NULL, NULL, NULL);
        return 0;
    }"

. auto/feature


if [ $nxt_found = no ]; then
    $echo
    $echo $0: error: no JNI found.
    $echo
    exit 1;
fi

NXT_JAVA_VERSION=`$NXT_JAVAC -version 2>&1`
NXT_JAVA_VERSION=${NXT_JAVA_VERSION#javac }
NXT_JAVA_INCLUDE="$NXT_JAVA_INCLUDE -I$NXT_BUILD_DIR/$NXT_JAVA_MODULE -DNXT_JAVA_VERSION=$NXT_JAVA_VERSION"

if grep ^$NXT_JAVA_MODULE: $NXT_MAKEFILE 2>&1 > /dev/null; then
    $echo
    $echo $0: error: duplicate \"$NXT_JAVA_MODULE\" module configured.
    $echo
    exit 1;
fi

. ./version

NXT_UNIT_JAR=nginx-unit-jsc-${NXT_SPEC_TARGET}-$NXT_VERSION.jar
# TODO: Fix websocket for jakarta
NXT_WS_API_JAR=websocket-api-${NXT_JAVA_MODULE}-$NXT_VERSION.jar

NXT_JAVA_BUILD_CP=$NXT_BUILD_DIR/$NXT_JAVA_MODULE
NXT_JAVA_BUILD_P=""
NXT_JAVA_INSTALL_JARS=
NXT_JAVA_UNINSTALL_JARS=

NXT_JAVA_JARS=$NXT_BUILD_DIR/$NXT_JAVA_MODULE/nxt_jars.h
mkdir -p $NXT_BUILD_DIR/$NXT_JAVA_MODULE

cat << END > $NXT_JAVA_JARS
#ifndef _NXT_JAVA_JARS_INCLUDED_
#define _NXT_JAVA_JARS_INCLUDED_

#define NXT_JARS "$NXT_JARS"

static const char *nxt_java_system_jars[] = {
END

cd src/java/jsc-${NXT_SPEC_TARGET}
# the build should be done during the make 
# mvn package
mvn dependency:copy-dependencies -DoutputDirectory=target/lib-provided -DincludeScope=provided
mvn dependency:copy-dependencies -DoutputDirectory=target/lib-runtime -DincludeScope=runtime
cd -

for NXT_JAR_FILE in $(ls src/java/jsc-${NXT_SPEC_TARGET}/target/lib-provided) ; do
	$echo "    \"$NXT_JAR_FILE\"," >> $NXT_JAVA_JARS
done

cat << END >> $NXT_JAVA_JARS
    "$NXT_WS_API_JAR",
    NULL
};

static const char *nxt_java_unit_jars[] = {
    "$NXT_UNIT_JAR",
END

for NXT_JAR_FILE in $(ls src/java/jsc-${NXT_SPEC_TARGET}/target/lib-runtime) ; do
	$echo "    \"$NXT_JAR_FILE\"," >> $NXT_JAVA_JARS
done

cat << END >> $NXT_JAVA_JARS
    NULL
};

#endif /* _NXT_JAVA_JARS_INCLUDED_ */
END

NXT_JAVA_LIBJVM="$NXT_JAVA_LIB_SERVER_PATH/libjvm.so"

if [ "$NXT_SYSTEM" = "Darwin" ]; then
NXT_JAVA_LIBC_DIR="/usr/lib"
else
NXT_JAVA_LIBC_DIR=`ldd "$NXT_JAVA_LIBJVM" | grep -F libc. | cut -d' ' -f3`
NXT_JAVA_LIBC_DIR=`dirname $NXT_JAVA_LIBC_DIR`
fi


NXT_JAVA_MOUNTS_HEADER=nxt_${NXT_JAVA_MODULE}_mounts.h

cat << END > $NXT_BUILD_DIR/include/$NXT_JAVA_MOUNTS_HEADER
#ifndef _NXT_JAVA_MOUNTS_H_INCLUDED_
#define _NXT_JAVA_MOUNTS_H_INCLUDED_


static const nxt_fs_mount_t  nxt_java_mounts[] = {
    {(u_char *) "$NXT_JAVA_LIBC_DIR", (u_char *) "$NXT_JAVA_LIBC_DIR",
     NXT_FS_BIND, (u_char *) "bind", 0, NULL, 1, 1},
    {(u_char *) "$NXT_JAVA_HOME", (u_char *) "$NXT_JAVA_HOME",
     NXT_FS_BIND, (u_char *) "bind", 0, NULL, 1, 1},
};


#endif /* _NXT_JAVA_MOUNTS_H_INCLUDED_ */
END

$echo " + Java module: ${NXT_JAVA_MODULE}.unit.so"

. auto/cc/deps

$echo >> $NXT_MAKEFILE

NXT_JAVA_MODULE_SRCS=" \
    src/nxt_java.c \
    src/java/nxt_jni.c \
    src/java/nxt_jni_Context.c \
    src/java/nxt_jni_HeaderNamesEnumeration.c \
    src/java/nxt_jni_HeadersEnumeration.c \
    src/java/nxt_jni_InputStream.c \
    src/java/nxt_jni_OutputStream.c \
    src/java/nxt_jni_Request.c \
    src/java/nxt_jni_Response.c \
    src/java/nxt_jni_Thread.c \
    src/java/nxt_jni_URLClassLoader.c \
"

# The Java module object files.

nxt_objs=$NXT_BUILD_DIR/src/nxt_unit.o

for nxt_src in $NXT_JAVA_MODULE_SRCS; do

    nxt_obj=${nxt_src%.c}-$NXT_JAVA_MODULE.o
    nxt_dep=${nxt_src%.c}-$NXT_JAVA_MODULE.dep
    nxt_dep_flags=`nxt_gen_dep_flags`
    nxt_dep_post=`nxt_gen_dep_post`
    nxt_objs="$nxt_objs $NXT_BUILD_DIR/$nxt_obj"

    cat << END >> $NXT_MAKEFILE

$NXT_BUILD_DIR/$nxt_obj: $nxt_src $NXT_VERSION_H
	\$(v)mkdir -p $NXT_BUILD_DIR/src/java
	\$(PP_CC) \$@
	\$(v)\$(CC) -c \$(CFLAGS) -DNXT_JAVA_MOUNTS_H=\"$NXT_JAVA_MOUNTS_HEADER\" \\
           \$(NXT_INCS) $NXT_JAVA_INCLUDE \\
	$nxt_dep_flags \\
	-o $NXT_BUILD_DIR/$nxt_obj $nxt_src
	$nxt_dep_post

-include $NXT_BUILD_DIR/$nxt_dep

END

done

cat << END >> $NXT_MAKEFILE

.PHONY: ${NXT_JAVA_MODULE}
.PHONY: ${NXT_JAVA_MODULE}-install
.PHONY: ${NXT_JAVA_MODULE}-uninstall

all: ${NXT_JAVA_MODULE}

${NXT_JAVA_MODULE}: $NXT_BUILD_DIR/lib/unit/modules/${NXT_JAVA_MODULE}.unit.so \
    $NXT_BUILD_DIR/lib/unit/modules/$NXT_UNIT_JAR

$NXT_BUILD_DIR/lib/unit/modules/${NXT_JAVA_MODULE}.unit.so: $nxt_objs
	\$(PP_LD) \$@
	\$(v)\$(NXT_MODULE_LINK) -o \$@ $nxt_objs $NXT_JAVA_LDFLAGS $NXT_LD_OPT


install: ${NXT_JAVA_MODULE}-install

${NXT_JAVA_MODULE}-install: \\
    $NXT_BUILD_DIR/lib/unit/modules/${NXT_JAVA_MODULE}.unit.so \\
    $NXT_BUILD_DIR/lib/unit/modules/$NXT_UNIT_JAR \\
    java-shared-install
	install -d \$(DESTDIR)$NXT_MODULESDIR
	install -p $NXT_BUILD_DIR/lib/unit/modules/${NXT_JAVA_MODULE}.unit.so \\
		\$(DESTDIR)$NXT_MODULESDIR/
	install -d \$(DESTDIR)$NXT_JARS
	install -p -m 0644 $NXT_BUILD_DIR/$NXT_UNIT_JAR \$(DESTDIR)$NXT_JARS/

uninstall: ${NXT_JAVA_MODULE}-uninstall

${NXT_JAVA_MODULE}-uninstall: java-shared-uninstall
	rm -f \$(DESTDIR)$NXT_MODULESDIR/${NXT_JAVA_MODULE}.unit.so
	@rmdir -p \$(DESTDIR)$NXT_MODULESDIR 2>/dev/null || true
	rm -f \$(DESTDIR)$NXT_JARS/$NXT_UNIT_JAR
	rm -f \$(DESTDIR)$NXT_JARS/$NXT_WS_API_JAR
	@rmdir -p \$(DESTDIR)$NXT_JARS 2>/dev/null || true

END

if ! grep ^$NXT_BUILD_DIR/$NXT_UNIT_JAR: $NXT_MAKEFILE 2>&1 > /dev/null; then

cat << END >> $NXT_MAKEFILE


$NXT_BUILD_DIR/$NXT_JAVA_MODULE/.nginx.unit.classes: $(find src/java/jsc-${NXT_SPEC_TARGET}/src/main/java -name "*.java" -o -name "*.properties" | sed -e "s/\$/ \\\\/g")

	rm -rf $NXT_BUILD_DIR/$NXT_JAVA_MODULE/nginx/unit
	cd src/java/jsc-${NXT_SPEC_TARGET} && mvn package
	touch \$@

$NXT_BUILD_DIR/lib/unit/modules/$NXT_UNIT_JAR: \\
    $NXT_BUILD_DIR/$NXT_JAVA_MODULE/.nginx.unit.classes \\
    $NXT_BUILD_DIR/$NXT_JAVA_MODULE/.nginx.unit.deps
	cp src/java/jsc-javax/target/nginx-unit-jsc-${NXT_SPEC_TARGET}-1.34.0.jar \$@

$NXT_BUILD_DIR/$NXT_JAVA_MODULE/.nginx.unit.deps: \\
	$(find src/java/jsc-${NXT_SPEC_TARGET}/target/lib-runtime -name "*.jar" | sed -e "s/\$/ \\\\/g")
	$(find src/java/jsc-${NXT_SPEC_TARGET}/target/lib-provided -name "*.jar" | sed -e "s/\$/ \\\\/g")

	cp src/java/jsc-${NXT_SPEC_TARGET}/target/lib-runtime/*.jar $NXT_BUILD_DIR/lib/unit/modules/
	cp src/java/jsc-${NXT_SPEC_TARGET}/target/lib-provided/*.jar $NXT_BUILD_DIR/lib/unit/modules/
	touch \$@

END

fi

if ! grep ^java-shared-install: $NXT_MAKEFILE 2>&1 > /dev/null; then

    cat << END >> $NXT_MAKEFILE

.PHONY: java-shared-install
.PHONY: java-shared-uninstall

java-shared-install: $NXT_JAVA_INSTALL_JARS
	install -d \$(DESTDIR)$NXT_JARS
	install -p -m 0644 $NXT_JAVA_INSTALL_JARS \$(DESTDIR)$NXT_JARS/

java-shared-uninstall:
	rm -f $NXT_JAVA_UNINSTALL_JARS
	@rmdir -p \$(DESTDIR)$NXT_JARS 2>/dev/null || true

END

fi
